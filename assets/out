#!/bin/bash

set -eu -o pipefail
exec 3>&1 1>&2

SRC="$1"

payload=$(mktemp /tmp/resource-out.XXXXXX)
cat > "${payload}" <&0

region=$(jq -r '.source.region // ""' < "${payload}")
if [ -z "$region" ]; then
  region=$AWS_REGION
fi

if [ -z "$region" ]; then
  echo "Unable to determine AWS region"
  exit 1
fi

template=$(jq -r '.params.template // empty' < "${payload}")
if [ -z "${template}" ]; then
  echo "template not passed in params:" >&2
  jq '.params // {}' < "${payload}" >&2
  exit 1
elif [ ! -f "$SRC/${template}" ]; then
  echo "template $SRC/${template} does not exist" >&2
  exit 1
fi

args=()
mapfile -t files <(jq -r '.params.var_file // empty | if type =="array" then .[] else . end' < "${payload}")

for file in ${files[@]}; do
  if [ ! -f "$SRC/${file}" ]; then
    echo "var_file $SRC/${file} does not exist" >&2
    exit 1
  else
    args+="var-file=$SRC/${file}"
  fi
done

jq '.params|del(.template,.var_file) // empty' < "${payload}" > /tmp/vars.json

cd $(dirname $SRC/${template})

packer validate "${args[@]}" -var-file=/tmp/vars.json $SRC/${template}
packer build -machine-readable "${args[@]}" -var-file=/tmp/vars.json $SRC/${template} \
  | tee /tmp/output

ami=$(awk -F, '$5 == "id" { print $6 }' /tmp/output | sed 's/%!(PACKER_COMMA)/\n/' | grep $region | awk -F: '{ print $2 }')

jq -n --arg ami "$ami" '{ "version": { "ami": $ami } }' >&3
